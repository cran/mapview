// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gsubC
std::string gsubC(const std::string& pattern, const std::string& replacement, std::string x);
RcppExport SEXP _mapview_gsubC(SEXP patternSEXP, SEXP replacementSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(gsubC(pattern, replacement, x));
    return rcpp_result_gen;
END_RCPP
}
// brewPopupRowC
std::string brewPopupRowC(std::string index, std::string colname, std::string value);
RcppExport SEXP _mapview_brewPopupRowC(SEXP indexSEXP, SEXP colnameSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::string >::type colname(colnameSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(brewPopupRowC(index, colname, value));
    return rcpp_result_gen;
END_RCPP
}
// brewPopupRowAltC
std::string brewPopupRowAltC(std::string index, std::string colname, std::string value);
RcppExport SEXP _mapview_brewPopupRowAltC(SEXP indexSEXP, SEXP colnameSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::string >::type colname(colnameSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(brewPopupRowAltC(index, colname, value));
    return rcpp_result_gen;
END_RCPP
}
// brewPopupCoords
std::string brewPopupCoords(std::string colname, std::string value);
RcppExport SEXP _mapview_brewPopupCoords(SEXP colnameSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type colname(colnameSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(brewPopupCoords(colname, value));
    return rcpp_result_gen;
END_RCPP
}
// mergePopupRows
std::string mergePopupRows(CharacterVector names, CharacterVector values);
RcppExport SEXP _mapview_mergePopupRows(SEXP namesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(mergePopupRows(names, values));
    return rcpp_result_gen;
END_RCPP
}
// createTemplate
std::string createTemplate(std::string tmpPath);
RcppExport SEXP _mapview_createTemplate(SEXP tmpPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type tmpPath(tmpPathSEXP);
    rcpp_result_gen = Rcpp::wrap(createTemplate(tmpPath));
    return rcpp_result_gen;
END_RCPP
}
// listPopupTemplates
List listPopupTemplates(CharacterMatrix x, CharacterVector names, std::string tmpPath);
RcppExport SEXP _mapview_listPopupTemplates(SEXP xSEXP, SEXP namesSEXP, SEXP tmpPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< std::string >::type tmpPath(tmpPathSEXP);
    rcpp_result_gen = Rcpp::wrap(listPopupTemplates(x, names, tmpPath));
    return rcpp_result_gen;
END_RCPP
}
// df2String
CharacterMatrix df2String(DataFrame x);
RcppExport SEXP _mapview_df2String(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(df2String(x));
    return rcpp_result_gen;
END_RCPP
}
// one2JSON
std::string one2JSON(CharacterVector x);
RcppExport SEXP _mapview_one2JSON(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(one2JSON(x));
    return rcpp_result_gen;
END_RCPP
}
// all2JSONlist
List all2JSONlist(CharacterMatrix x);
RcppExport SEXP _mapview_all2JSONlist(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(all2JSONlist(x));
    return rcpp_result_gen;
END_RCPP
}
// anyNA
bool anyNA(NumericVector x);
RcppExport SEXP _mapview_anyNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(anyNA(x));
    return rcpp_result_gen;
END_RCPP
}
// rowNA
LogicalVector rowNA(NumericMatrix x);
RcppExport SEXP _mapview_rowNA(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowNA(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mapview_gsubC", (DL_FUNC) &_mapview_gsubC, 3},
    {"_mapview_brewPopupRowC", (DL_FUNC) &_mapview_brewPopupRowC, 3},
    {"_mapview_brewPopupRowAltC", (DL_FUNC) &_mapview_brewPopupRowAltC, 3},
    {"_mapview_brewPopupCoords", (DL_FUNC) &_mapview_brewPopupCoords, 2},
    {"_mapview_mergePopupRows", (DL_FUNC) &_mapview_mergePopupRows, 2},
    {"_mapview_createTemplate", (DL_FUNC) &_mapview_createTemplate, 1},
    {"_mapview_listPopupTemplates", (DL_FUNC) &_mapview_listPopupTemplates, 3},
    {"_mapview_df2String", (DL_FUNC) &_mapview_df2String, 1},
    {"_mapview_one2JSON", (DL_FUNC) &_mapview_one2JSON, 1},
    {"_mapview_all2JSONlist", (DL_FUNC) &_mapview_all2JSONlist, 1},
    {"_mapview_anyNA", (DL_FUNC) &_mapview_anyNA, 1},
    {"_mapview_rowNA", (DL_FUNC) &_mapview_rowNA, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mapview(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
